<!DOCTYPE HTML>
<html>
<head>
	<title>Листинг 9.4</title>
<!--Начало сценария-->
<script type="text/javascript">
//Переменная для записи идентификатора процесса,
//запускаемого с помощью функции setInterval():
let timerID
//Количество клеток по горизонтали и вертикали:
let Nx = 200, Ny = 100
//Размер клетки (в пикселях):
let dz = 3
//Переменная для записи ссылки
//на раскрывающийся списко:
let list
//Переменные для записи ссылок на кнопки:
let start, conf
//Два названия для одной из кнопок:
let nameA = "Начать"
let nameB = "Остановить"
//Переменные для записи ссылок на объект графической
//области и объект графического контекста:
let cnv, ctx
//Переменная для записи ссылки на массив, через который
//реализуется конфигурация клеток:
let A
//Функция для определения начального распределения
//живых и мертвых клеток:
function init(B){
    //Локальные переменные:
    let i, j, p
    //Вероятность того,что клетка живая:
    p = list.value
    //Перебор строк массива:
    for(i = 0; i < B.length; i++){
        //Перебор элементов в строке:
        for(j = 0; j < B[i].length; j++){
            //Если случайное число меньше вероятности:
            if(Math.random() < p){
                //Живая клетка:
                B[i][j] = 1
                }
            //Если случайное число меньше вероятности:
            else{
                //Мертвая клетка:
                B[i][j] = 0
            }
        }
    }
}
//Функция для подсчета живых клетов, являющихся
//соседними для заданной клетки:
function getState(B, i, j){
    //Локальные переменные:
    let im, ip, jm, jp, r
    //Если клетка не в первой строке:
    if(i > 0){
        //Первый индекс для соседней клетки сверху:
        im = i - 1
    } 
    //Если клетка в первой строке:
    else{
        //Первый индекс для соседней клетки "сверху":
        im = B.length - 1
    }
    //Если клетка не в последней строке:
    if(i < B.length - 1){
        //Первый индекс для соседней клетки снизу:
        ip = i + 1
    }
    //Если клетка в последней строке:
    else{
        //первый индекс для соседней клетки "снизу":
        ip = 0
    }
    //если клетка не в первом столбце:
    if(j > 0){
        //Второй индекс для соседней клетки слева:
        jm = j - 1
    }
    //Если клетка в первом столбце:
    else{
        //Второй индекс для соседней клетки "слева":
        jm = B[i].length - 1
    }
    //Если клетка не в последнем столбце:
    if(j < B[i].length - 1){
        //второй индекс для соседней клетки справа:
        jp = j + 1
    }
    //Если клетка в последнем столбце:
    else{
        //второй индекс для соседней клетки "справа":
        jp = 0
    }
    //вычисление количества живых соседних клеток:
    r = B[i][jm]+B[i][jp]+B[im][j]+B[ip][j]+B[im][jm]+B[ip][jp]+B[im][jp]+B[ip][jm]
    //Результат функции:
    return r
}
//Функция для вычисления новой конфигурации
//(нового поколения клеток):
function recalc(B){
    //Локальная переменная:
    let nbs
    //Локальный массив для записи новой конфигурации:
    let C = new Array(B.length)
    //Перебор элементов локального массива:
    for(let i = 0; i < C.length; i++){
        //Создание новой строки:
        C[i] = new Array(B[i].length)
        //Перебор элементов в строке:
        for(let j = 0; j < C[i].length; j++){
            //Количество живых соседних клеток для 
            //исходной конфигурации:
            nbs = getState(B, i, j)
            //Если текущая клетка в исходной
            //конфигурации мертвая:
            if(B[i][j]==0){
                //Если ровно три живых соседних клетки:
                if(nbs == 3){
                    //В новой конфигурации клетка оживает:
                    C[i][j] = 1
                }
                //Если живых клеток не три:
                else{
                    //В новой конфигурации клетка остается
                    //мертвой:
                    C[i][j] = 0
                }
            }
            //Если текущая клетка в исходной
            //конфигурации живая:
            else{
                //Если живых соседних клеток две или три:
                if((nbs == 2) || (nbs == 3)){
                    //В новой конфигурации клетка остается
                    //живой:
                    C[i][j] = 1
                }
                //Если живых соседних клеток
                //не три и не две:
                else{
                    //В новой конфигурации клетка
                    //становится мертвой:
                    C[i][j] = 0
                }
            }
        }
    }
//Результат функции:
return C
}
//Функция для отображения картинки на основе
//конфигурации живых и мертвых клеток:
function show(B){
    //Очистка графической области:
    ctx.clearRect(0,0,cnv.width, cnv.height)
    //Синий цвет для выполнения заливки области
    //с фивыми клетками:
    ctx.fillStyle = "blue"
    //Перебор строк массива:
    for(let i = 0; i < B.length; i++){
        //Перебор элементов в строке:
        for(let j = 0; j < B[i].length; j++){
            //Если клетка живая:
            if(B[i][j] == 1){
                //Заливка области клетки цветом:
                ctx.fillRect(dz*j,dz*i,dz,dz)
            }
        }
    }
}
//Функция для вычисления новой конфигурации
//и отображения картинки:
function showNext(){
    //Новая конфигурация:
    A = recalc(A)
    //Отображение новой картинки:
    show(A)
}
//Функция для вызова при генерации начальной
//конфигурации клеток:
function config(){
    //начальное распределение живых и мертвых клеток:
    init(A)
    //отображение картинки:
    show(A)
}
//Обработчик события, связанного с загрузкой документа:
window.onload = function(){
    //получение ссылки на объект графической области:
    cnv = document.getElementById("mycanvas")
    //Ширина графической области:
    cnv.width = Nx*dz
    //Вычисление графической области:
    cnv.height = Ny*dz
    //Ширина формы с элементами управления:
    document.getElementById("myform").style.width = cnv.width-10+"px"
    //Получение ссылки на объект графического контекста:
    ctx = cnv.getContext("2d")
    //Получение ссылки на объект кнопки выбора
    //начальной конфигурации живых и мертвых клеток:
    conf = document.getElementById("conf")
    //Кнопка выбора конфигурации в активном состоянии:
    conf.disabled = false
    //Получение ссылки на объект кнопки, используемой
    //для запуска и остановки вычислений:
    start = document.getElementById("start")
    //Название для кнопки запуска вычислений:
    start.value = nameA
    //Получение ссылки на объект раскрывающегося списка:
    list=document.getElementById("prob")
    //Список в активном состоянии:
    list.disabled = false
    //индекс выбранного в списке пункта:
    let index = 1
    //Выбор пункта в раскрывающемся списке:
    list.selectedIndex = index
    //Массив для реализации конфигурации клеток:
    A = new Array(Ny)
    //Создание каждой отдельной строки:
    for(let k = 0; k < A.length; k++){
        //Новая строка:
        A[k] = new Array(Nx)
    }
    //начальная конфигурация:
    config()
    //Обработка щелчка на кнопке выбора конфигурации:
    conf.onclick = config
    //Обработчик события, связанного с изменением
    //состояния раскрывающегося списка:
    list.onchange = conf.onclick
    //Обработчик события, связанного со щелчком
    //на кнопке запуска/остановки вычислений:
    start.onclick = function(){
        //Если у кнопки первое название:
        if(this.value == nameA){
            //Блокировка раскрывающегося списка:
            list.disabled = true
            //Блокировка кнопки выбора конфигурации:
            conf.disabled = true
            //Изменение названия кнопки:
            this.value = nameB
            //Запуск процесса вычислений:
            timerID = setInterval(showNext, 10)
        }
        //Если у кнопки другое название:
        else{
            //Отмена блокировки раскрывающегося списка:
            list.disabled = false
            //Отмена блокировки кнопки
            //выбора конфигурации:
            conf.disabled = false
            //Изменение названия кнопки:
            this.value = nameA
            //Остановка процесса вычислений:
            clearInterval(timerID)
        }
    }
}
</script>
<!--Завершение сценария-->
<!--Описание стилей-->
<style type="text/css">
/*Стиль формы myform*/
#myform{
    height: 30px;
    border-style: outset;
    padding: 5px;
    background-color: #f0f0f0;
    font-size: 17px;
}

/*Стиль для кнопок формы myform*/
#myform input[type = "button"]{
    font-weight: bold;
    height: 30px;
}
/*Стиль для раскрывающегося списка формы myform*/
#myform select{
    height: 30px;
    border-color: silver;
    font-weight: bold;
}
</style>
<!--Завершение описания стилей-->
</head>
<body>
<h3>Листинг 9.4</h3><hr />
<!--Форма с элементами управления-->
<form id="myform">
<!--Текста-->
<b>Вероятность</b>
<!--Раскрывающийся список-->
<select size="1" id="prob">
<option value="0.1">0.10</option>
<option value="0.2">0.20</option>
<option value="0.3">0.30</option>
<option value="0.5">0.50</option>
<option value="0.75">0.75</option>
</select>
<!--Кнопка выбора конфигурации-->
<input type="button" id="conf" value="Новая конфигурация"/>
<!--Кнопка начала и остановки вычислений-->
<input type="button" id="start" style="width: 120px;" />
</form>
<!--Графическая область-->
<canvas id="mycanvas" style="border: ridge;"></canvas>
</body>
</html>